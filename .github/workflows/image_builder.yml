name: Router firmware image builder

on:
  push:
    tags:
      - '**'
  workflow_dispatch:
    inputs:
      BUILD_CUSTOM_PACKAGE:
        description: Build custom package inside "custom-packages"
        type: boolean
        default: false
      CUSTOM_PACKAGE_NAMES:
        description: Name of all custom package inside "custom-packages"
        default: luci-app-argon-config luci-theme-argon luci-app-temp-status
      UPLOAD_SYSUPGRADE_ONLY:
        description: Save sysupgrade only artifact
        type: boolean
        default: true
      OPENWRT_DOWNLOAD_URL:
        description: Openwrt base download url
        default: https://downloads.openwrt.org/releases
      OPENWRT_VERSION:
        description: Openwrt version
        default: 24.10.1
      OPENWRT_TARGET:
        description: Openwrt target to build
        default: mediatek/filogic
      OPENWRT_PROFILE:
        description: Openwrt device profile name
        default: cudy_tr3000-v1
      OPENWRT_PACKAGES:
        description: Pre install package to openwrt
        default: adguardhome attr avahi-dbus-daemon base-files block-mount busybox ca-bundle cgi-io curl dbus ddns-scripts ddns-scripts-cloudflare ddns-scripts-services dnsmasq dropbear e2fsprogs eip197-mini-firmware firewall4 fitblk fstools fwtool getrandom hostapd-common htop ip-tiny iptables-mod-ipopt iptables-zz-legacy iw iwinfo jansson4 jshn jsonfilter kernel kmod-asn1-decoder kmod-asn1-encoder kmod-cfg80211 kmod-crypto-acompress kmod-crypto-aead kmod-crypto-arc4 kmod-crypto-authenc kmod-crypto-cbc kmod-crypto-ccm kmod-crypto-cmac kmod-crypto-crc32c kmod-crypto-ctr kmod-crypto-cts kmod-crypto-des kmod-crypto-ecb kmod-crypto-gcm kmod-crypto-geniv kmod-crypto-gf128 kmod-crypto-ghash kmod-crypto-hash kmod-crypto-hmac kmod-crypto-hw-safexcel kmod-crypto-kpp kmod-crypto-lib-chacha20 kmod-crypto-lib-chacha20poly1305 kmod-crypto-lib-curve25519 kmod-crypto-lib-poly1305 kmod-crypto-manager kmod-crypto-md5 kmod-crypto-null kmod-crypto-rng kmod-crypto-seqiv kmod-crypto-sha1 kmod-crypto-sha256 kmod-crypto-sha3 kmod-crypto-sha512 kmod-crypto-user kmod-dax kmod-dm kmod-dnsresolver kmod-fs-exportfs kmod-fs-ext4 kmod-fs-nfs kmod-fs-nfs-common kmod-fs-nfs-common-rpcsec kmod-fs-nfs-v4 kmod-fs-nfsd kmod-gpio-button-hotplug kmod-hwmon-core kmod-ifb kmod-ipt-core kmod-ipt-ipopt kmod-keys-encrypted kmod-keys-trusted kmod-leds-gpio kmod-lib-crc-ccitt kmod-lib-crc16 kmod-lib-crc32c kmod-lib-lzo kmod-libphy kmod-mac80211 kmod-mii kmod-mt76-connac kmod-mt76-core kmod-mt7915e kmod-mt7981-firmware kmod-nf-conntrack kmod-nf-conntrack6 kmod-nf-flow kmod-nf-ipt kmod-nf-log kmod-nf-log6 kmod-nf-nat kmod-nf-reject kmod-nf-reject6 kmod-nfnetlink kmod-nft-core kmod-nft-fib kmod-nft-nat kmod-nft-offload kmod-nls-base kmod-oid-registry kmod-phy-aquantia kmod-ppp kmod-pppoe kmod-pppox kmod-random-core kmod-sched-cake kmod-sched-core kmod-scsi-core kmod-slhc kmod-thermal kmod-tpm kmod-udptunnel4 kmod-udptunnel6 kmod-usb-core kmod-usb-ehci kmod-usb-net kmod-usb-net-cdc-eem kmod-usb-net-cdc-ether kmod-usb-net-cdc-ncm kmod-usb-net-cdc-subset kmod-usb-net-ipheth kmod-usb-net-rndis kmod-usb-storage kmod-usb-xhci-hcd kmod-usb-xhci-mtk kmod-usb2 kmod-usb3 kmod-wireguard libatomic1 libattr libavahi-client libavahi-dbus-support libblkid1 libblobmsg-json20240329 libc libcap libcomerr0 libcurl4 libdaemon libdbus libdevmapper libe2p2 libevdev libexpat libext2fs2 libgcc1 libgmp10 libgnutls libimobiledevice libimobiledevice-glue libip4tc2 libip6tc2 libiptext0 libiptext6-0 libiwinfo-data libiwinfo20230701 libjson-c5 libjson-script20240329 libkeyutils1 liblua5.1.5 liblucihttp-lua liblucihttp-ucode liblucihttp0 libmbedtls21 libmnl0 libncurses6 libnettle8 libnftnl11 libnghttp2-14 libnl-tiny1 libopenssl3 libpam libplist libpopt0 libpthread libreadline8 librt libss2 libstdcpp6 libtasn1 libtirpc libubox20240329 libubus-lua libubus20250102 libuci-lua libuci20250120 libuclient20201210 libucode20230711 libudebug libudev-zero liburing libusb-1.0-0 libusbmuxd libustream-mbedtls20201210 libuuid1 libwrap libxml2 libxtables12 logd lua lua-bit32 luaposix luci luci-app-ddns luci-app-firewall luci-app-package-manager luci-app-sqm luci-base luci-compat luci-lib-base luci-lib-ip luci-lib-ipkg luci-lib-jsonc luci-lib-nixio luci-lib-uqr luci-light luci-lua-runtime luci-mod-admin-full luci-mod-network luci-mod-status luci-mod-system luci-proto-ipv6 luci-proto-ppp luci-proto-wireguard luci-ssl luci-theme-bootstrap mt7981-wo-firmware mtd netifd nfs-kernel-server nfs-utils-libs nftables-json odhcp6c odhcpd-ipv6only openssh-sftp-server openwrt-keyring opkg ppp ppp-mod-pppoe procd procd-seccomp procd-ujail px5g-mbedtls resolveip rpcbind rpcd rpcd-mod-file rpcd-mod-iwinfo rpcd-mod-luci rpcd-mod-rrdns rpcd-mod-ucode sqm-scripts tc-tiny terminfo ubi-utils uboot-envtools ubox ubus ubusd uci uclient-fetch ucode ucode-mod-fs ucode-mod-html ucode-mod-lua ucode-mod-math ucode-mod-nl80211 ucode-mod-rtnl ucode-mod-ubus ucode-mod-uci ucode-mod-uloop uhttpd uhttpd-mod-ubus urandom-seed urngd usbids usbmuxd usbutils usign wifi-scripts wireguard-tools wireless-regdb wpad-basic-mbedtls xtables-legacy zlib

env:
  BUILD_CUSTOM_PACKAGE: ${{github.event_name == 'push' || inputs.BUILD_CUSTOM_PACKAGE}}
  CUSTOM_PACKAGE_NAMES: ${{inputs.CUSTOM_PACKAGE_NAMES || 'luci-app-argon-config luci-theme-argon luci-app-temp-status'}}
  UPLOAD_SYSUPGRADE_ONLY: ${{inputs.UPLOAD_SYSUPGRADE_ONLY || false}}
  OPENWRT_DOWNLOAD_URL: ${{inputs.OPENWRT_DOWNLOAD_URL || 'https://downloads.openwrt.org/releases'}}
  OPENWRT_VERSION: ${{inputs.OPENWRT_VERSION || '24.10.1'}}
  OPENWRT_TARGET: ${{inputs.OPENWRT_TARGET || 'mediatek/filogic'}}
  PROFILE: ${{inputs.OPENWRT_PROFILE || 'cudy_tr3000-v1'}}
  PACKAGES: ${{inputs.OPENWRT_PACKAGES || 'adguardhome attr avahi-dbus-daemon base-files block-mount busybox ca-bundle cgi-io curl dbus ddns-scripts ddns-scripts-cloudflare ddns-scripts-services dnsmasq dropbear e2fsprogs eip197-mini-firmware firewall4 fitblk fstools fwtool getrandom hostapd-common htop ip-tiny iptables-mod-ipopt iptables-zz-legacy iw iwinfo jansson4 jshn jsonfilter kernel kmod-asn1-decoder kmod-asn1-encoder kmod-cfg80211 kmod-crypto-acompress kmod-crypto-aead kmod-crypto-arc4 kmod-crypto-authenc kmod-crypto-cbc kmod-crypto-ccm kmod-crypto-cmac kmod-crypto-crc32c kmod-crypto-ctr kmod-crypto-cts kmod-crypto-des kmod-crypto-ecb kmod-crypto-gcm kmod-crypto-geniv kmod-crypto-gf128 kmod-crypto-ghash kmod-crypto-hash kmod-crypto-hmac kmod-crypto-hw-safexcel kmod-crypto-kpp kmod-crypto-lib-chacha20 kmod-crypto-lib-chacha20poly1305 kmod-crypto-lib-curve25519 kmod-crypto-lib-poly1305 kmod-crypto-manager kmod-crypto-md5 kmod-crypto-null kmod-crypto-rng kmod-crypto-seqiv kmod-crypto-sha1 kmod-crypto-sha256 kmod-crypto-sha3 kmod-crypto-sha512 kmod-crypto-user kmod-dax kmod-dm kmod-dnsresolver kmod-fs-exportfs kmod-fs-ext4 kmod-fs-nfs kmod-fs-nfs-common kmod-fs-nfs-common-rpcsec kmod-fs-nfs-v4 kmod-fs-nfsd kmod-gpio-button-hotplug kmod-hwmon-core kmod-ifb kmod-ipt-core kmod-ipt-ipopt kmod-keys-encrypted kmod-keys-trusted kmod-leds-gpio kmod-lib-crc-ccitt kmod-lib-crc16 kmod-lib-crc32c kmod-lib-lzo kmod-libphy kmod-mac80211 kmod-mii kmod-mt76-connac kmod-mt76-core kmod-mt7915e kmod-mt7981-firmware kmod-nf-conntrack kmod-nf-conntrack6 kmod-nf-flow kmod-nf-ipt kmod-nf-log kmod-nf-log6 kmod-nf-nat kmod-nf-reject kmod-nf-reject6 kmod-nfnetlink kmod-nft-core kmod-nft-fib kmod-nft-nat kmod-nft-offload kmod-nls-base kmod-oid-registry kmod-phy-aquantia kmod-ppp kmod-pppoe kmod-pppox kmod-random-core kmod-sched-cake kmod-sched-core kmod-scsi-core kmod-slhc kmod-thermal kmod-tpm kmod-udptunnel4 kmod-udptunnel6 kmod-usb-core kmod-usb-ehci kmod-usb-net kmod-usb-net-cdc-eem kmod-usb-net-cdc-ether kmod-usb-net-cdc-ncm kmod-usb-net-cdc-subset kmod-usb-net-ipheth kmod-usb-net-rndis kmod-usb-storage kmod-usb-xhci-hcd kmod-usb-xhci-mtk kmod-usb2 kmod-usb3 kmod-wireguard libatomic1 libattr libavahi-client libavahi-dbus-support libblkid1 libblobmsg-json20240329 libc libcap libcomerr0 libcurl4 libdaemon libdbus libdevmapper libe2p2 libevdev libexpat libext2fs2 libgcc1 libgmp10 libgnutls libimobiledevice libimobiledevice-glue libip4tc2 libip6tc2 libiptext0 libiptext6-0 libiwinfo-data libiwinfo20230701 libjson-c5 libjson-script20240329 libkeyutils1 liblua5.1.5 liblucihttp-lua liblucihttp-ucode liblucihttp0 libmbedtls21 libmnl0 libncurses6 libnettle8 libnftnl11 libnghttp2-14 libnl-tiny1 libopenssl3 libpam libplist libpopt0 libpthread libreadline8 librt libss2 libstdcpp6 libtasn1 libtirpc libubox20240329 libubus-lua libubus20250102 libuci-lua libuci20250120 libuclient20201210 libucode20230711 libudebug libudev-zero liburing libusb-1.0-0 libusbmuxd libustream-mbedtls20201210 libuuid1 libwrap libxml2 libxtables12 logd lua lua-bit32 luaposix luci luci-app-ddns luci-app-firewall luci-app-package-manager luci-app-sqm luci-base luci-compat luci-lib-base luci-lib-ip luci-lib-ipkg luci-lib-jsonc luci-lib-nixio luci-lib-uqr luci-light luci-lua-runtime luci-mod-admin-full luci-mod-network luci-mod-status luci-mod-system luci-proto-ipv6 luci-proto-ppp luci-proto-wireguard luci-ssl luci-theme-bootstrap mt7981-wo-firmware mtd netifd nfs-kernel-server nfs-utils-libs nftables-json odhcp6c odhcpd-ipv6only openssh-sftp-server openwrt-keyring opkg ppp ppp-mod-pppoe procd procd-seccomp procd-ujail px5g-mbedtls resolveip rpcbind rpcd rpcd-mod-file rpcd-mod-iwinfo rpcd-mod-luci rpcd-mod-rrdns rpcd-mod-ucode sqm-scripts tc-tiny terminfo ubi-utils uboot-envtools ubox ubus ubusd uci uclient-fetch ucode ucode-mod-fs ucode-mod-html ucode-mod-lua ucode-mod-math ucode-mod-nl80211 ucode-mod-rtnl ucode-mod-ubus ucode-mod-uci ucode-mod-uloop uhttpd uhttpd-mod-ubus urandom-seed urngd usbids usbmuxd usbutils usign wifi-scripts wireguard-tools wireless-regdb wpad-basic-mbedtls xtables-legacy zlib'}}
  IMAGE_BUILDER_FILE_NAME: ""
  IMAGE_BUILDER_URL: ""
  NEED_DOWNLOAD: true
  BUILD_TARGET_DIR: ""
  OUTPUT_BASE_NAME: ""
  BUILDER_FILE_EXT: ".xz"

jobs:
  build-image:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Checkout if needed
        uses: actions/checkout@v4
        if: ${{ env.BUILD_CUSTOM_PACKAGE }}

      - name: Setup variables
        run: |
          OPENWRT_TARGET=${{ env.OPENWRT_TARGET }}
          OPENWRT_TARGET_AS_NAME=${OPENWRT_TARGET////-}
          IMAGE_BUILDER_FILE_NAME=openwrt-imagebuilder-${{ env.OPENWRT_VERSION }}-${OPENWRT_TARGET_AS_NAME}.Linux-x86_64
          IMAGE_BUILDER_URL=${{ env.OPENWRT_DOWNLOAD_URL }}/${{ env.OPENWRT_VERSION }}/targets/$OPENWRT_TARGET/$IMAGE_BUILDER_FILE_NAME.tar
          CURL_OUTPUT=$(curl --HEAD ${IMAGE_BUILDER_URL}.xz)
          BUILDER_FILE_EXT=${{ env.BUILDER_FILE_EXT }}
          if [[ $(echo $CURL_OUTPUT | grep "404") != "" ]]; then
            BUILDER_FILE_EXT=".zst"
            echo "BUILDER_FILE_EXT=${BUILDER_FILE_EXT}" >> $GITHUB_ENV
          fi
          IMAGE_BUILDER_URL=${IMAGE_BUILDER_URL}${BUILDER_FILE_EXT}
          BUILD_TARGET_DIR=$IMAGE_BUILDER_FILE_NAME/bin/targets/$OPENWRT_TARGET
          OUTPUT_BASE_NAME=openwrt-${{ env.OPENWRT_VERSION }}-${OPENWRT_TARGET_AS_NAME}-${{ env.PROFILE }}
          echo "IMAGE_BUILDER_FILE_NAME=${IMAGE_BUILDER_FILE_NAME}" >> $GITHUB_ENV
          echo "IMAGE_BUILDER_URL=${IMAGE_BUILDER_URL}" >> $GITHUB_ENV
          echo "BUILD_TARGET_DIR=${BUILD_TARGET_DIR}" >> $GITHUB_ENV
          echo "OUTPUT_BASE_NAME=${OUTPUT_BASE_NAME}" >> $GITHUB_ENV

      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.IMAGE_BUILDER_FILE_NAME }}
          key: ${{ env.IMAGE_BUILDER_FILE_NAME }}

      - name: Check file 
        shell: bash
        run: |
          if [[ -d ${{env.IMAGE_BUILDER_FILE_NAME}} ]]; then
            echo "NEED_DOWNLOAD=false" >> $GITHUB_ENV
          else
            echo "NEED_DOWNLOAD=true" >> $GITHUB_ENV
          fi

      - name: Download and extract image builder
        if: ${{ env.NEED_DOWNLOAD == 'true' }}
        run: |
          wget ${{ env.IMAGE_BUILDER_URL }}
          IMAGE_BUILD_FILE=${{env.IMAGE_BUILDER_FILE_NAME}}.tar${{ env.BUILDER_FILE_EXT }}
          if [[ ${{ env.BUILDER_FILE_EXT }} == ".zst" ]]; then
            tar --zstd -x -f ${IMAGE_BUILD_FILE}
          else
            tar -J -x -f ${IMAGE_BUILD_FILE}
          fi

      - name: Copy custom packages and add custom package
        if: ${{ env.BUILD_CUSTOM_PACKAGE }}
        run: |
          rsync -hav custom-packages/* ${{env.IMAGE_BUILDER_FILE_NAME}}/packages/
          echo "PACKAGES=${{env.PACKAGES}} ${{env.CUSTOM_PACKAGE_NAMES}}" >> $GITHUB_ENV

      - name: Save cache
        if: ${{ env.NEED_DOWNLOAD == 'true' }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.IMAGE_BUILDER_FILE_NAME }}
          key: ${{ env.IMAGE_BUILDER_FILE_NAME }}

      - name: Build openwrt image
        run: |
          cd ${{ env.IMAGE_BUILDER_FILE_NAME }}
          make image \
          PROFILE=${{ env.PROFILE }} \
          PACKAGES="${{ env.PACKAGES }}"
          ls -lah bin/targets/${{ env.OPENWRT_TARGET }}

      - name: Upload sysupgrade output
        if: ${{ github.event_name == 'workflow_dispatch' && env.UPLOAD_SYSUPGRADE_ONLY == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_BASE_NAME }}-sysupgrade
          path: |
            ${{ env.BUILD_TARGET_DIR }}/${{ env.OUTPUT_BASE_NAME }}-squashfs-sysupgrade.bin
            ${{ env.BUILD_TARGET_DIR }}/profiles.json
            ${{ env.BUILD_TARGET_DIR }}/sha256sums
          retention-days: 5

      - name: Upload all output
        if: ${{ github.event_name == 'workflow_dispatch' && env.UPLOAD_SYSUPGRADE_ONLY == 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_BASE_NAME }}
          path: ${{ env.BUILD_TARGET_DIR }}
          retention-days: 5

      - name: Create release
        uses: ncipollo/release-action@v1.14.0
        if: ${{ github.event_name == 'push' }}
        with:
          name: "${{ github.ref_name }}"
          artifacts: "${{ env.BUILD_TARGET_DIR }}/*"
          body: |
            ### Build information:
            * Build target: **${{ env.OPENWRT_TARGET }}**
            * Device profile: **${{ env.PROFILE }}**
            * Openwrt version: **${{ env.OPENWRT_VERSION }}**
            * Image builder downloaded from: ${{ env.IMAGE_BUILDER_URL }}
            <details>
            <summary>Installed package</summary>

            ```
            ${{ env.PACKAGES }}
            ```
            </details>

